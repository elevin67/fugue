package fugue;

import jm.JMC;
import jm.music.data.*;
import jm.music.tools.*;
import jm.util.*;
import java.util.Vector;
import java.awt.event.*;
import java.awt.*;
import java.util.Enumeration;
import java.util.ArrayList;

public class FugueAnalyzer extends Frame implements JMC {
    static Score s = new Score();


  public FugueAnalyzer() {
	   FileDialog fd;
     Frame f = new Frame();

     for(;;) {
       // open a MIDI file
       fd = new FileDialog(f,"Open MIDI file or choose cancel to finish.",FileDialog.LOAD);
       fd.setVisible(true);
       // break out when user presses cancel
       if(fd.getFile() == null) {
         break;
       }
       Read.midi(s,fd.getDirectory() + fd.getFile());
       s.setTitle(fd.getFile());

       // the following will need to be moved into a different function
       // got subject, need to analyze without rests
       Phrase subject = getSubject(s);
       ArrayList<Note> subjectArrayList = convertPhraseToArrayList(subject);

       ArrayList<Note> counterpoint = analyzeSubjectCounterpoint(score, subject);
     }
   }

   private Phrase getSubject(Score score) {
     double earliestStartTime = 1000000000.0;
     int startIndex = 0;
     double lastStartTime = 0.0;
     Phrase subject = new Phrase();
     Phrase firstPhrase = new Phrase();
     int index = 0;

     Enumeration enum1 = score.getPartList().elements();
     while(enum1.hasMoreElements()) {
       Part nextPt = (Part)enum1.nextElement();
       Phrase phrase1 = nextPt.getPhrase(0);
       double startTime = phrase1.getNoteStartTime(1);

       if(startTime < earliestStartTime) {
         lastStartTime = earliestStartTime;
         earliestStartTime = startTime;
         startIndex = index;
       }
       index++;
     }

     // may need to change something with lastStartTime
     subject = score.getPart(startIndex).getPhrase(0).copy(0,lastStartTime-1);
     return subject;
   }

   private ArrayList<Note> convertPhraseToArrayList(Phrase phrase) {
     ArrayList<Note> notes = new ArrayList<Note>();
     for(int i = 0; i < phrase.size(); i++) {
       notes.add(phrase.get(i));
     }

     while(true) {
       if(notes.get(0).isRest()) {
         notes.remove(0);
       } else if(notes.get(notes.size()-1).isRest()) {
         notes.remove(notes.size()-1);
       } else {
         break;
       }
     }
     return notes;
   }

   private ArrayList<Note> analyzeSubjectCounterpoint(Score score, ArrayList<Note> phrase) {
     Enumeration enum1 = s.getPartList().elements();
     int partIndex = 0;
     while(enum1.hasMoreElements()) {
	      Part nextPt = (Part)enum1.nextElement();
        Enumeration enum2 = nextPt.getPhraseList().elements();
        int phraseIndex = 0;
        while(enum2.hasMoreElements()) {
          Phrase nextPhr = (Phrase)enum2.nextElement();
          Enumeration enum3 = nextPhr.getNoteList().elements();
          int noteIndex = 0;
          while(enum3.hasMoreElements()) {
            Note nextNote = (Note)enum3.nextElement();
            if(nextNote.getRhythmValue() == phrase.get(0).getRhythmValue()) {
              parseForSubject(partIndex,phraseIndex,noteIndex,score,phrase);
            }
            noteIndex++;
          }
          phraseIndex++;
        }
        partIndex++;
      }
    }

    private void parseForSubject(int partIndex, int phraseIndex, int noteIndex, Score score, ArrayList<Note> phrase) {
      Part part = score.getPart(partIndex);
      Phrase phrase = part.getPhrase(phraseIndex);
      int index = noteIndex + 1;
      Note prevNote = phrase.get(noteIndex);
      int matches = 0;

      while(true) {
        if(noteIndex !>= phrase.size()) {
          
        }
      }
    }

   public static void main(String[] args) {
     new FugueAnalyzer();
   }
}
